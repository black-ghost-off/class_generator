# CODE_BEGIN header
# PYTHON generated by class generator: class generator
# CODE_END

# USER_CODE_BEGIN header
{user_header}
# USER_CODE_END

# CODE_BEGIN include
import numpy as np
# CODE_END

# USER_CODE_BEGIN includes

# USER CODE END

# CODE_BEGIN defines
MAX_BUFFER_SIZE = 1024
MAX_VALUES = 1024
# CODE_END

# USER_CODE_BEGIN defines

# USER CODE END

# CODE_BEGIN enums
class Status: 
    OK = 0
    ERROR = 1
    INPROGRESS = 1
    TEST = 10
    TEST2 = 1


class TEST: 
    OK = 0
    ERROR = 1
    INPROGRESS = 1
    TEST = 10
    TEST2 = 1

# CODE_END

# USER_CODE_BEGIN enums

# USER CODE END

# CODE_BEGIN classes
class test: 
    structure = np.dtype([
        ("id", np.int16),
        ("value", np.int16),
        ("array", np.int16, (10,)),
    ])
    def example_function3(arg1, arg2):
        pass

    def example_function4(arg1, arg2):
        pass


class system: 
    structure = np.dtype([
        ("id", test),
        ("voltage0", Status),
        ("voltage1", np.int16),
        ("voltage2", np.int16),
    ])
    def example_function(arg1, arg2):
        pass


# CODE_END

# USER_CODE_BEGIN classes

# USER CODE END

# CODE_BEGIN functions
def example_function1(arg1, arg2):
    pass

def example_function2(arg1, arg2):
    pass

# CODE_END

# USER_CODE_BEGIN functions

# USER CODE END