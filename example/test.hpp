// CODE_BEGIN header
// CPP generated by class generator: class generator
#ifndef TEST_HPP
#define TEST_HPP
// CODE_END

// USER_CODE_BEGIN header

// USER_CODE_END

// CODE_BEGIN include
#include <iostream>
// CODE_END

// USER_CODE_BEGIN includes

// USER CODE END

// CODE_BEGIN defines
#define MAX_BUFFER_SIZE 1024
#define MAX_VALUES 1024
// CODE_END

// USER_CODE_BEGIN defines

// USER CODE END

// CODE_BEGIN enums
enum class Status {
    OK = 0
    ERROR
    INPROGRESS
    TEST = 10
    TEST2
};

enum class TEST {
    OK = 0
    ERROR
    INPROGRESS
    TEST = 10
    TEST2
};
// CODE_END

// USER_CODE_BEGIN enums

// USER CODE END

// CODE_BEGIN classes
class test {
private:
    #pragma pack(push, 1)
    struct Struct{
        int16_t id;
        int16_t value;
        int16_t array[10];
    };
    #pragma pack(pop)

public:
    test();
    ~test();

    void example_function3(int16_t arg1, int32_t arg2);
    void example_function4(int16_t arg1, float arg2);
};
class system {
private:
    #pragma pack(push, 1)
    struct Struct{
        int16_t id;
        int16_t voltage0;
        int16_t voltage1;
        int16_t voltage2;
    };
    #pragma pack(pop)

public:
    system();
    ~system();

    void example_function(int16_t arg1, double arg2);
};
// CODE_END

// USER_CODE_BEGIN classes

// USER CODE END

// CODE_BEGIN functions
    int16_t example_function1(int32_t arg1, float arg2);
    int32_t example_function2(int16_t arg1, float arg2);
// CODE_END

// USER_CODE_BEGIN functions

// USER CODE END